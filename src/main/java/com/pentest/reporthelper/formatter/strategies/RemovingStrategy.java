package com.pentest.reporthelper.formatter.strategies;

import burp.api.montoya.http.message.HttpHeader;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.http.message.responses.HttpResponse;

/**
 * Implements the {@link HttpHeaderFormatterStrategy} to selectively remove HTTP headers from requests and responses.
 * This strategy retains crucial headers such as 'Host' for requests and 'Content-Type' and 'Content-Disposition'
 * for responses to aid body parsing.
 */
public class RemovingStrategy implements HttpHeaderFormatterStrategy {

    /**
     * Removes headers from the HTTP request, retaining only the 'Host' header 
     * and any header that starts with ":".
     *
     * @param request The original HTTP request containing headers.
     * @return A new HTTP request with selective headers removed.
     */
    private HttpRequest removedRequestHeaders(HttpRequest request) {
        for (HttpHeader header : request.headers()) {
            if (!header.name().equals("Host") && !header.name().startsWith(":")) {
                request = request.withRemovedHeader(header);
            }
        }
        return request;
    }

    /**
     * Removes headers from the HTTP response, retaining only the 'Content-Type', 
     * 'Content-Disposition', and headers that start with ":". These headers are 
     * kept to facilitate body parsing.
     *
     * @param response The original HTTP response containing headers.
     * @return A new HTTP response with selective headers removed.
     */
    private HttpResponse removedResponseHeaders(HttpResponse response) {
        for (HttpHeader header : response.headers()) {
            String headerNameLower = header.name().toLowerCase();
            boolean isContentType = headerNameLower.equals("content-type");
            boolean isContentDisposition = headerNameLower.equals("content-disposition");
            boolean isSpecialHeader = header.name().startsWith(":");

            if (!isContentType && !isContentDisposition && !isSpecialHeader) {
                response = response.withRemovedHeader(header);
            }
        }
        return response;
    }

    /**
     * Removes selective headers from the provided HTTP request.
     *
     * @param request Original HTTP request.
     * @return A new HTTP request with selective headers removed.
     */
    @Override
    public HttpRequest formatRequest(HttpRequest request) {
        return removedRequestHeaders(request);
    }

    /**
     * Removes selective headers from the provided HTTP response.
     *
     * @param response Original HTTP response.
     * @return A new HTTP response with selective headers removed.
     */
    @Override
    public HttpResponse formatResponse(HttpResponse response) {
        return removedResponseHeaders(response);
    }
}
