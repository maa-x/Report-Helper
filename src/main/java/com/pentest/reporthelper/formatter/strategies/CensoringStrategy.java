package com.pentest.reporthelper.formatter.strategies;

import java.util.ArrayList;
import java.util.List;

import burp.api.montoya.http.message.HttpHeader;
import burp.api.montoya.http.message.requests.HttpRequest;
import burp.api.montoya.http.message.responses.HttpResponse;

/**
 * Implements the {@link HttpHeaderFormatterStrategy} for censoring sensitive data from HTTP headers,
 * particularly cookies and authorization headers.
 */
public class CensoringStrategy implements HttpHeaderFormatterStrategy {

    /**
     * Censors sensitive data from HTTP request headers. Cookies and authorization headers
     * are specifically targeted and sanitized.
     * 
     * As the withUpdatedHeader method changes all matching headers, we must instead remove
     * them one by one, and add the censored ones at the end.
     *
     * @param request The original HTTP request containing potentially sensitive headers.
     * @return A new HTTP request with sensitive headers censored.
     */
    private HttpRequest censoredRequestHeaders(HttpRequest request) {
        List<String> censoredCookies = new ArrayList<>();

        for (HttpHeader header : request.headers()) {
            String headerNameLower = header.name().toLowerCase();

            // Check if the header is a cookie and censor its value.
            if (headerNameLower.equals("cookie")) {
                String censoredCookie = header.value().replaceAll("(=)[^;]+", "=[redacted]");
                censoredCookies.add(censoredCookie);
            } else if (headerNameLower.equals("authorization")) {
                request = request.withUpdatedHeader("Authorization", "[redacted]");
            }
        }

        // Combine all censored cookies into a single header for HTTP/1 requests.
        if (!censoredCookies.isEmpty()) {
            if (request.httpVersion().contains("2")) {
                request = request.withRemovedHeader("Cookie");
                for (String censoredCookie : censoredCookies) {
                    request = request.withAddedHeader("Cookie", censoredCookie);
                }
            } else {
                String combinedCensoredCookieHeader = String.join("; ", censoredCookies);
                request = request.withUpdatedHeader(HttpHeader.httpHeader("Cookie: " + combinedCensoredCookieHeader));
            }
        }

        return request;
    }

    /**
     * Censors sensitive data from HTTP response headers. Specifically, the set-cookie headers are sanitized.
     *
     * @param response The original HTTP response containing potentially sensitive set-cookie headers.
     * @return A new HTTP response with set-cookie headers censored.
     */
    private HttpResponse censoredResponseHeaders(HttpResponse response) {
        List<String> censoredCookies = new ArrayList<>();

        for (HttpHeader header : response.headers()) {
            String headerNameLower = header.name().toLowerCase();
            Boolean headerIsCookie = headerNameLower.equals("set-cookie");
            Boolean headerIsAuthorization = headerNameLower.equals("authorization");

            if (headerIsCookie) {
                String censoredValue = header.toString().replaceAll("(?i)(?:^Set-Cookie:\\s*)([^=]+)=([^;,\\s]+)", "$1=[redacted]");
                censoredCookies.add(censoredValue);
            } else if (headerIsAuthorization) {
                response = response.withUpdatedHeader("Authorization", "[redacted]");
            }
        }

        // Remove all original set-cookie headers and replace them with censored versions.
        response = response.withRemovedHeader("Set-Cookie");

        for (String censoredCookie : censoredCookies) {
            response = response.withAddedHeader("Set-Cookie", censoredCookie);
        }

        return response;
    }

    /**
     * Censors sensitive data from the given HTTP request headers.
     *
     * @param request Original HTTP request.
     * @return A new HTTP request with censored headers.
     */
    @Override
    public HttpRequest formatRequest(HttpRequest request) {
        return censoredRequestHeaders(request);
    }

    /**
     * Censors sensitive data from the given HTTP response headers.
     *
     * @param response Original HTTP response.
     * @return A new HTTP response with censored headers.
     */
    @Override
    public HttpResponse formatResponse(HttpResponse response) {
        return censoredResponseHeaders(response);
    }

}
