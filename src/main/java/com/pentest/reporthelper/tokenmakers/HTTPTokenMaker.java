// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/main/jflex/com/pentest/reporthelper/HTTPTokenMaker.flex

/*
 * This file is based on the flex files from RSyntaxTextArea,
 * 
 * Also includes lots of code from restcli: https://github.com/restcli/restcli/blob/cc9087d883742b0c468b0b2874208f6827d210b5/src/main/java/uos/dev/restcli/parser/lexer.flex#L4
 *
 * WwwFormTokenMaker.java - Generates syntax tokens for HTTP requests and responses.
 * Specifically to "application/x-www-form-urlencoded" body.
 * Uses code from https://github.com/asm0dey/restcli
 */
package com.pentest.reporthelper.tokenmakers;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rsyntaxtextarea.modes.PlainTextTokenMaker;
import com.pentest.reporthelper.tokenmakers.util.ContentTypeManager;
// import org.fife.ui.rsyntaxtextarea.modes.*;

/**
 * A parser of HTTP requests {@code application/x-www-form-urlencoded}.
 *
 * @see <a href="http://www.w3.org/TR/html401/interact/forms.html#form-content-type">Form content type</a>
 */

@SuppressWarnings("fallthrough")
public class HTTPTokenMaker extends MultipartAwareAbstractTokenMaker {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int REQ_LINE = 2;
  public static final int REQ_HEADER = 4;
  public static final int REQ_BODY = 6;
  public static final int QUERY_PARAM_NAME = 8;
  public static final int QUERY_PARAM_VALUE = 10;
  public static final int BODY_PARAM_NAME = 12;
  public static final int BODY_PARAM_VALUE = 14;
  public static final int BODY_MULTIPART_HEADER = 16;
  public static final int ANY_BODY = 18;
  public static final int PLAIN_TEXT_BODY = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\4\u0100\1\u0400\5\u0100"+
    "\1\u0500\4\u0100\1\u0600\247\u0100\10\u0700\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\2\0\1\5\1\0\1\6\1\7\3\10\1\11\1\12"+
    "\1\10\1\13\1\14\1\15\12\16\1\17\2\0\1\20"+
    "\1\0\1\21\1\0\1\22\1\23\1\24\1\25\1\26"+
    "\1\23\1\27\1\30\1\31\2\32\1\33\1\32\1\34"+
    "\1\35\1\36\1\32\1\37\1\40\1\41\1\42\5\32"+
    "\1\43\1\0\1\44\1\0\1\32\1\0\1\45\1\23"+
    "\1\46\1\47\1\50\1\23\2\32\1\51\4\32\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\5\32"+
    "\12\0\1\3\32\0\1\5\u01df\0\1\5\177\0\13\5"+
    "\35\0\2\3\5\0\1\5\57\0\1\5\250\0\1\62"+
    "\u0194\0\1\63\1\0\1\64\140\0\1\5\377\0\u0100\65";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[2048];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\3\1\1\3\2\4\1\5\1\6"+
    "\11\3\5\7\1\10\1\11\2\10\1\12\1\13\2\12"+
    "\1\14\1\15\3\12\1\16\1\17\1\20\2\12\1\21"+
    "\1\22\1\23\1\24\1\4\4\24\4\25\4\26\20\0"+
    "\1\27\1\30\7\0\1\31\1\32\1\0\4\26\1\33"+
    "\15\0\2\34\3\26\6\0\1\35\5\0\3\26\10\0"+
    "\3\26\1\0\1\36\2\0\1\37\2\0\1\26\1\36"+
    "\1\26\2\0\1\37\3\0\2\26\4\0\1\37\1\0"+
    "\2\26\1\0\1\37\2\0\1\26\3\0\1\26\1\0"+
    "\1\40\1\0\1\26\2\0\1\26\2\0\1\26\3\0"+
    "\2\26\3\0\2\26\3\0\2\26\3\0\2\26\3\0"+
    "\2\26\3\0\2\26\3\0\2\26\3\0\2\26\3\0"+
    "\2\26\3\0\2\26\3\0\2\26\3\0\2\26\3\0"+
    "\2\26\3\0\2\26\3\0\2\26\3\0\2\26\3\0"+
    "\2\26\3\0\2\26\3\0\2\26\3\0\2\26\1\0"+
    "\1\41\1\0\2\26\2\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0252\0\u0360\0\u0396\0\u03cc\0\u0252\0\u0402\0\u0438\0\u046e"+
    "\0\u04a4\0\u04da\0\u0510\0\u0546\0\u02f4\0\u057c\0\u0252\0\u05b2"+
    "\0\u05e8\0\u02f4\0\u057c\0\u0252\0\u061e\0\u02f4\0\u057c\0\u0252"+
    "\0\u0654\0\u0288\0\u068a\0\u06c0\0\u0252\0\u02f4\0\u057c\0\u06f6"+
    "\0\u0252\0\u072c\0\u0762\0\u061e\0\u0798\0\u07ce\0\u0252\0\u0252"+
    "\0\u0252\0\u0804\0\u083a\0\u0870\0\u02f4\0\u057c\0\u0252\0\u08a6"+
    "\0\u02f4\0\u057c\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u05b2\0\u0252\0\u05e8"+
    "\0\u0cde\0\u068a\0\u0d14\0\u06f6\0\u0d4a\0\u0798\0\u083a\0\u0252"+
    "\0\u0870\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u09b4\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e"+
    "\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u0d80\0\u0db6\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u0fd2"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u0252\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u08dc\0\u18ae\0\u18e4\0\u191a\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00"+
    "\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u0252\0\u1c7a"+
    "\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1d52"+
    "\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4"+
    "\0\u1fda\0\u2010\0\u2046\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154"+
    "\0\u218a\0\u21c0\0\u21f6\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304"+
    "\0\u233a\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u247e\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664"+
    "\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814"+
    "\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4"+
    "\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74"+
    "\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24"+
    "\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4"+
    "\0\u2f0a\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084"+
    "\0\u30ba\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234"+
    "\0\u326a\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4"+
    "\0\u341a\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u0252\0\u3528\0\u355e"+
    "\0\u3594\0\u0252\0\u08dc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\14\1\15\2\0\6\14\1\16\27\14\1\17\16\14"+
    "\1\20\2\14\1\0\1\21\1\22\1\15\1\0\1\23"+
    "\10\21\1\24\3\21\1\25\2\21\1\26\1\27\1\21"+
    "\1\30\1\31\4\21\1\32\1\33\2\21\1\34\1\21"+
    "\1\35\16\21\1\36\2\21\1\0\2\37\1\15\2\0"+
    "\6\37\1\40\2\37\1\40\1\41\2\37\21\40\1\42"+
    "\1\37\15\40\1\43\2\37\1\0\2\44\1\45\2\0"+
    "\36\44\1\46\16\44\1\47\2\44\1\0\1\50\1\51"+
    "\1\52\1\50\1\51\1\50\1\53\2\50\1\54\1\50"+
    "\2\54\1\50\1\54\1\50\1\55\1\50\21\54\1\56"+
    "\1\50\15\54\1\57\4\50\1\51\1\52\1\50\1\51"+
    "\1\50\1\60\1\61\1\50\1\62\1\63\2\62\1\50"+
    "\1\62\3\50\21\62\1\56\1\50\15\62\1\57\5\50"+
    "\1\64\3\50\1\65\2\50\1\66\1\50\2\66\1\50"+
    "\1\66\1\50\1\67\1\50\21\66\1\56\1\50\15\66"+
    "\1\57\5\50\1\64\3\50\1\60\1\70\1\50\1\62"+
    "\1\63\2\62\1\50\1\62\3\50\21\62\1\56\1\50"+
    "\15\62\1\57\3\50\1\71\2\72\1\0\1\72\6\71"+
    "\1\73\2\71\1\73\1\74\2\71\21\73\1\75\1\71"+
    "\15\73\1\76\2\71\1\0\2\77\1\45\2\0\6\77"+
    "\1\100\27\77\1\101\16\77\1\102\2\77\1\0\2\103"+
    "\1\45\10\103\1\104\27\103\1\105\16\103\1\106\3\103"+
    "\70\0\1\15\76\0\1\107\130\0\1\110\1\111\70\0"+
    "\1\112\4\0\1\22\2\0\1\23\23\0\1\113\36\0"+
    "\1\23\2\0\1\23\61\0\1\24\5\0\13\24\1\0"+
    "\44\24\35\0\1\114\56\0\1\115\65\0\1\116\65\0"+
    "\1\117\12\0\1\120\62\0\1\121\51\0\1\122\12\0"+
    "\1\123\4\0\1\116\62\0\1\124\110\0\1\125\16\0"+
    "\1\126\2\0\1\126\1\127\2\0\21\126\2\0\15\126"+
    "\4\0\2\130\1\0\63\130\2\0\1\45\64\0\1\51"+
    "\2\0\1\51\77\0\1\131\3\0\5\131\16\0\4\131"+
    "\23\0\1\132\2\0\4\54\1\0\1\54\3\0\21\54"+
    "\2\0\15\54\22\0\1\133\3\0\5\133\16\0\4\133"+
    "\23\0\1\134\2\0\1\62\1\0\2\62\1\0\1\62"+
    "\3\0\21\62\2\0\15\62\16\0\1\63\71\0\1\135"+
    "\3\0\5\135\16\0\4\135\23\0\1\136\2\0\4\66"+
    "\1\0\1\66\3\0\21\66\2\0\15\66\5\0\2\72"+
    "\1\0\1\72\74\0\1\137\2\0\1\137\1\140\2\0"+
    "\21\137\2\0\15\137\4\0\2\141\1\0\63\141\13\0"+
    "\1\142\52\0\2\103\1\0\65\103\1\0\10\103\1\143"+
    "\54\103\1\0\53\103\1\144\1\145\10\103\1\0\57\103"+
    "\1\146\3\103\10\0\1\147\1\0\31\147\2\0\15\147"+
    "\54\0\1\150\67\0\1\151\75\0\1\152\44\0\1\153"+
    "\60\0\1\154\64\0\1\155\73\0\1\156\46\0\1\157"+
    "\104\0\1\160\65\0\1\161\65\0\1\162\64\0\1\116"+
    "\47\0\1\163\125\0\1\164\21\0\1\54\3\0\5\54"+
    "\16\0\4\54\33\0\1\62\3\0\5\62\16\0\4\62"+
    "\33\0\1\66\3\0\5\66\16\0\4\66\25\0\1\165"+
    "\1\0\31\165\2\0\15\165\4\0\2\103\1\0\5\103"+
    "\1\166\1\103\31\166\2\103\15\166\6\103\1\0\45\103"+
    "\1\167\17\103\1\0\47\103\1\170\15\103\1\0\57\103"+
    "\1\171\3\103\47\0\1\172\67\0\1\173\76\0\1\174"+
    "\44\0\1\175\60\0\1\176\57\0\1\177\40\0\1\200"+
    "\111\0\1\156\76\0\1\201\60\0\1\202\60\0\1\203"+
    "\65\0\1\204\123\0\1\205\3\0\2\103\1\0\44\103"+
    "\1\206\20\103\1\0\46\103\1\207\16\103\1\0\57\103"+
    "\1\210\3\103\45\0\1\211\74\0\1\212\73\0\1\213"+
    "\41\0\1\214\55\0\1\215\100\0\1\204\41\0\1\216"+
    "\105\0\1\217\60\0\1\156\63\0\1\156\121\0\1\220"+
    "\3\0\2\103\1\0\42\103\1\221\22\103\1\0\51\103"+
    "\1\222\13\103\1\0\57\103\1\223\3\103\46\0\1\224"+
    "\63\0\1\225\103\0\1\226\20\0\1\227\74\0\1\116"+
    "\57\0\1\230\103\0\1\231\113\0\1\232\3\0\2\103"+
    "\1\0\43\103\1\233\21\103\1\0\41\103\1\234\23\103"+
    "\1\0\57\103\1\235\3\103\60\0\1\236\67\0\1\237"+
    "\21\0\1\240\50\0\1\241\12\0\1\242\111\0\1\156"+
    "\107\0\1\243\3\0\2\103\1\0\55\103\1\244\7\103"+
    "\1\0\57\103\1\245\3\103\50\0\1\246\77\0\1\247"+
    "\17\0\1\250\52\0\1\241\14\0\1\251\65\0\1\252"+
    "\131\0\1\253\3\0\2\103\1\0\45\103\1\254\17\103"+
    "\1\0\57\103\1\255\3\103\47\0\1\212\100\0\1\256"+
    "\21\0\1\257\65\0\1\260\50\0\1\241\146\0\1\261"+
    "\3\0\2\103\1\0\44\103\1\222\20\103\1\0\57\103"+
    "\1\262\3\103\62\0\1\263\21\0\1\264\131\0\1\265"+
    "\3\0\2\103\1\0\57\103\1\266\3\103\62\0\1\267"+
    "\3\0\2\270\1\0\63\270\62\0\1\271\3\0\2\103"+
    "\1\0\57\103\1\272\3\103\62\0\1\273\65\0\1\274"+
    "\3\0\2\103\1\0\57\103\1\275\3\103\62\0\1\276"+
    "\65\0\1\277\3\0\2\103\1\0\57\103\1\300\3\103"+
    "\63\0\1\301\1\302\64\0\1\301\1\303\1\0\2\103"+
    "\1\0\60\103\1\304\1\305\1\103\37\0\1\306\65\0"+
    "\1\307\65\0\1\310\26\0\2\103\1\0\34\103\1\311"+
    "\30\103\1\0\34\103\1\312\26\103\50\0\1\313\65\0"+
    "\1\314\65\0\1\315\15\0\2\103\1\0\45\103\1\316"+
    "\17\103\1\0\45\103\1\317\15\103\55\0\1\320\65\0"+
    "\1\321\1\0\1\322\65\0\1\322\6\0\2\103\1\0"+
    "\52\103\1\323\12\103\1\0\54\103\1\324\6\103\61\0"+
    "\1\325\65\0\1\326\60\0\1\327\11\0\2\103\1\0"+
    "\56\103\1\330\6\103\1\0\51\103\1\331\11\103\50\0"+
    "\1\332\65\0\1\333\70\0\1\334\12\0\2\103\1\0"+
    "\45\103\1\335\17\103\1\0\50\103\1\336\12\103\57\0"+
    "\1\337\65\0\1\340\60\0\1\341\13\0\2\103\1\0"+
    "\54\103\1\342\10\103\1\0\47\103\1\343\13\103\60\0"+
    "\1\344\65\0\1\345\64\0\1\346\6\0\2\103\1\0"+
    "\55\103\1\347\7\103\1\0\54\103\1\350\6\103\62\0"+
    "\1\351\65\0\1\352\53\0\1\353\15\0\2\103\1\0"+
    "\57\103\1\354\5\103\1\0\45\103\1\355\15\103\62\0"+
    "\1\356\65\0\1\357\65\0\1\360\3\0\2\103\1\0"+
    "\57\103\1\361\5\103\1\0\57\103\1\362\3\103\62\0"+
    "\1\363\65\0\1\364\65\0\1\365\3\0\2\103\1\0"+
    "\57\103\1\366\5\103\1\0\57\103\1\367\3\103\62\0"+
    "\1\370\65\0\1\371\65\0\1\372\3\0\2\103\1\0"+
    "\57\103\1\373\5\103\1\0\57\103\1\374\3\103\62\0"+
    "\1\375\65\0\1\376\65\0\1\377\3\0\2\103\1\0"+
    "\57\103\1\u0100\5\103\1\0\57\103\1\u0101\3\103\62\0"+
    "\1\u0102\65\0\1\u0103\65\0\1\u0104\3\0\2\103\1\0"+
    "\57\103\1\u0105\5\103\1\0\57\103\1\u0106\3\103\62\0"+
    "\1\u0107\65\0\1\u0108\65\0\1\u0109\3\0\2\103\1\0"+
    "\57\103\1\u010a\5\103\1\0\57\103\1\u010b\3\103\62\0"+
    "\1\u010c\65\0\1\u010d\65\0\1\u010e\3\0\2\103\1\0"+
    "\57\103\1\u010f\5\103\1\0\57\103\1\u0110\3\103\62\0"+
    "\1\u0111\65\0\1\u0112\65\0\1\u0113\3\0\2\103\1\0"+
    "\57\103\1\u0114\5\103\1\0\57\103\1\u0115\3\103\62\0"+
    "\1\u0116\65\0\1\u0117\65\0\1\u0118\3\0\2\103\1\0"+
    "\57\103\1\u0119\5\103\1\0\57\103\1\u011a\3\103\62\0"+
    "\1\u011b\65\0\1\u011c\65\0\1\u011d\3\0\2\103\1\0"+
    "\57\103\1\u011e\5\103\1\0\57\103\1\u011f\3\103\62\0"+
    "\1\u0120\65\0\1\u0121\65\0\1\u0122\3\0\2\103\1\0"+
    "\57\103\1\u0123\5\103\1\0\57\103\1\u0124\3\103\62\0"+
    "\1\u0125\65\0\1\u0126\65\0\1\u0127\3\0\2\103\1\0"+
    "\57\103\1\u0128\5\103\1\0\57\103\1\u0129\3\103\64\0"+
    "\1\303\63\0\1\u012a\3\0\2\103\1\0\61\103\1\305"+
    "\3\103\1\0\57\103\1\u012b\3\103";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13770];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\4\1\1\11\3\1\1\11\11\1\1\11"+
    "\4\1\1\11\3\1\1\11\4\1\1\11\3\1\1\11"+
    "\5\1\3\11\5\1\1\11\7\1\20\0\1\11\1\1"+
    "\7\0\1\11\1\1\1\0\5\1\15\0\5\1\6\0"+
    "\1\1\5\0\3\1\10\0\3\1\1\0\1\11\2\0"+
    "\1\1\2\0\3\1\2\0\1\1\3\0\2\1\4\0"+
    "\1\1\1\0\2\1\1\0\1\11\2\0\1\1\3\0"+
    "\1\1\1\0\1\1\1\0\1\1\2\0\1\1\2\0"+
    "\1\1\3\0\2\1\3\0\2\1\3\0\2\1\3\0"+
    "\2\1\3\0\2\1\3\0\2\1\3\0\2\1\3\0"+
    "\2\1\3\0\2\1\3\0\2\1\3\0\2\1\3\0"+
    "\2\1\3\0\2\1\3\0\2\1\3\0\2\1\3\0"+
    "\2\1\3\0\2\1\3\0\2\1\3\0\2\1\3\0"+
    "\2\1\1\0\1\11\1\0\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[299];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /**
	 * Adds the token specified to the current linked list of tokens as an
	 * "end token;" that is, at <code>zzMarkedPos</code>.
	 *
	 * @param tokenType The token's type.
	 */
	private void addEndToken(int tokenType) {
		addToken(zzMarkedPos,zzMarkedPos, tokenType);
	}

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
	// MARK: -HTTPTokenMaker:Variables
	private static final boolean DEBUG = false;

	/** 
	 * Internal types denoting line endings 
	 */

	private static final int INTERNAL_HEADER						= -100;
	private static final int INTERNAL_BODY_URLENCODED_FORM			= -101;
	private static final int INTERNAL_BODY_FORM_DATA				= -102;
	private static final int INTERNAL_BODY_FORM_DATA_BODY			= -103;
	private static final int INTERNAL_ANY_BODY						= -104;
	private static final int INTERNAL_REQUEST_AND_RESPONSE			= -105;
	private static final int INTERNAL_PLAIN_TEXT					= -106;

	private final TokenMakerFactory tokenMakerFactory;

	private String currentFieldName = null;
	private Boolean isContentTypeHeader = false;
	private String contentType = "application/x-www-form-urlencoded";
	private Boolean isMultiplePart = false;
	private String multipartContentType = "text/plain";
	private Boolean isResponse = false;
	private Boolean isRequestCookieHeader = false;
	private Boolean isResponseCookieHeader = false;
	private ContentTypeManager contentTypeManager = new ContentTypeManager();
	private Integer responseOffset = 0;

	//MARK: -HTTPTokenMaker:Methods

	public HTTPTokenMaker() {
		super();
		tokenMakerFactory = TokenMakerFactory.getDefaultInstance();
	}

	public void resetContentTypeManager() {
		contentTypeManager = new ContentTypeManager();
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		T("addToken: %d (%s)", tokenType, yytext().toString().substring(0, Math.min(yytext().length(), 100)));
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}

	

	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *                    occurs.
	 */
	@Override
	public void addToken(char[] array, int start, int end, int tokenType, int startOffset) {
		super.addToken(array, start,end, tokenType, startOffset);
		zzStartRead = zzMarkedPos;
	}


	@Override
	protected OccurrenceMarker createOccurrenceMarker() {
		return new HtmlOccurrenceMarker();
	}

	private int getStateForInitialTokenType(int initialTokenType, int startOffset) {
		int state = YYINITIAL;
		switch (initialTokenType) {
			case HTTPTokenMaker.INTERNAL_BODY_FORM_DATA:
			case HTTPTokenMaker.INTERNAL_BODY_FORM_DATA_BODY:
				contentType = "multipart/form-data";
				isMultiplePart = true;
				state = ANY_BODY;
				break;
			case HTTPTokenMaker.INTERNAL_ANY_BODY:
				contentType = "text/plain";
				isResponse = true;
				responseOffset = startOffset;
				state = ANY_BODY;
				break;
			case HTTPTokenMaker.INTERNAL_BODY_URLENCODED_FORM:
				contentType = "application/x-www-form-urlencoded";
				state = BODY_PARAM_NAME;
				break;
			case HTTPTokenMaker.INTERNAL_HEADER:
				state = REQ_LINE;
				break;
			case HTTPTokenMaker.INTERNAL_REQUEST_AND_RESPONSE:
				isResponse = true;
				responseOffset = startOffset;
				state = REQ_LINE;
				break;
			case HTTPTokenMaker.INTERNAL_PLAIN_TEXT:
				contentType = "text/plain";
				state = PLAIN_TEXT_BODY;
				break;
			default:
				state = YYINITIAL;
				break;
		}
		T("getStateForInitialTokenType: %d => %d", initialTokenType, state);
		return state;
	}

	private String getContentTypeForState() {
		// TODO: Make position & document aware ? Maybe not actually
		String shortContentType;
		if (contentType.toLowerCase().startsWith("multipart/")) {
			shortContentType = multipartContentType;
		} else {
			shortContentType = contentType;
		}
		T("getContentTypeForState: O: %s | N: %s", shortContentType, contentTypeManager.getContentType(zzStartRead));
		return shortContentType.split(";")[0];
	}

	//MARK: -HTTPTokenMaker::getTokenList

	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	@Override
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {
		T("getTokenList entry (%d) %s", initialTokenType, text.toString().substring(0, Math.min(text.length(), 100)));
		resetTokenList();
		this.offsetShift = -text.offset + startOffset;
		int languageIndex = 0;
		try {
			if (initialTokenType == 0 || (initialTokenType <= INTERNAL_HEADER && initialTokenType >= INTERNAL_PLAIN_TEXT)) {
				T("getTokenList option 1");
				int state = getStateForInitialTokenType(initialTokenType, startOffset);
				setLanguageIndex(languageIndex);
				start = text.offset;
				s = text;
				yyreset(zzReader);
				yybegin(state);
				return yylex();
			} else {
				T("getTokenList option 2");
				TokenMaker tokenMaker = tokenMakerFactory.getTokenMaker(contentTypeManager.getContentType(zzStartRead));
				return tokenMaker.getTokenList(text, initialTokenType, startOffset);
			}
		} catch (java.lang.Error e) {
			T("getTokenList lang error");
			yyreset(zzReader);
			e.printStackTrace();
			return new TokenImpl();
		} catch (IOException ioe) {
			T("getTokenList exception caught");
			yyreset(zzReader);
			ioe.printStackTrace();
			return new TokenImpl();
		}
	}

	int errorPos = -1;

	private void handleInvalidToken() {
		if (errorPos != -1) {
			int currentZzStartRead = zzStartRead;
			addToken(errorPos, zzStartRead - 1, Token.IDENTIFIER);
			zzStartRead = currentZzStartRead;
			errorPos = -1;
		}
	}

	private void startInvalidToken() {
		if (errorPos == -1) {
			errorPos = zzMarkedPos - 1;
		}
	}

	private void addBodyEndToken() {
		switch (yystate()) {
			case ANY_BODY:
			T("addBodyEndToken: ANY_BODY");
				addEndToken(HTTPTokenMaker.INTERNAL_ANY_BODY);
				break;
			case BODY_PARAM_NAME:
			case BODY_PARAM_VALUE:
			T("addBodyEndToken: BODY_PARAM_NAME/BODY_PARAM_VALUE");
				addEndToken(HTTPTokenMaker.INTERNAL_REQUEST_AND_RESPONSE);
				break;
			case PLAIN_TEXT_BODY:
			T("addBodyEndToken: PLAIN_TEXT_BODY");
				addEndToken(HTTPTokenMaker.INTERNAL_PLAIN_TEXT);
				break;			
			default:
				T("addBodyEndToken called from unexpected state (%d)", yystate());
				addEndToken(HTTPTokenMaker.INTERNAL_BODY_FORM_DATA);
				break;
		}
	}
	
	private void addHeaderEndToken() {
		addEndToken(HTTPTokenMaker.INTERNAL_HEADER);
	}

	/**
	 * Adds the token specified to the current linked list of tokens as a header.
	 * Also commences Content-Type mode if found.
	 *
	 */
	private void addHeaderName() {
		String header = yytext();
		if (header.toLowerCase().startsWith("content-type")) {
			isContentTypeHeader = true;
		} else if (header.toLowerCase().endsWith("cookie")) {
			if (header.toLowerCase().startsWith("set-cookie")) {
				isResponseCookieHeader = true;
			} else if (header.toLowerCase().startsWith("cookie")) {
				isRequestCookieHeader = true;
			}
		}
		if (header.endsWith(":")) {
			addToken(zzStartRead, zzMarkedPos-2, Token.RESERVED_WORD);
			addToken(zzMarkedPos-1, zzMarkedPos-1, Token.RESERVED_WORD);
		} else {
			addToken(Token.RESERVED_WORD);
		}
	}


	private void addCookieTokens(String cookieHeader, Integer start) {
		String[]	cookies = cookieHeader.split(";");
		Integer		startOffset = start;
		
		for (String cookie : cookies) {
			String[]	cookieNameOrValue = cookie.split("=", 2);
			addToken(start, start+cookieNameOrValue[0].length() - 1, Token.MARKUP_TAG_ATTRIBUTE);
			start += cookieNameOrValue[0].length();
			addToken(start, start, Token.SEPARATOR); // Adding the '='
			start += 1;
			if (cookieNameOrValue.length > 1) {
				addToken(start, start+cookieNameOrValue[1].length() - 1, Token.MARKUP_TAG_ATTRIBUTE_VALUE);
				start += cookieNameOrValue[1].length();
				if (cookieHeader.substring(start - startOffset).startsWith(";")) {
					addToken(start, start, Token.SEPARATOR); // Adding the ';'
					start += 1;
				}
			}
			if (isResponseCookieHeader) {
				zzStartRead = start;
				addToken(Token.IDENTIFIER);
				break;
			}
		}
		isResponseCookieHeader = false;
		isRequestCookieHeader = false;
	}


	private void setContentType(String contentTypeHeaderValue) {
		isContentTypeHeader = false;
		// T("SetContentType: [%d] => %s",zzCurrentPos, contentTypeHeaderValue);
		if (isMultiplePart && !contentTypeHeaderValue.toLowerCase().contains("multipart/form-data;")) {
			multipartContentType = contentTypeHeaderValue.trim();
			contentTypeManager.setContentType(zzCurrentPos, contentTypeHeaderValue.trim());
		} else {
			contentTypeManager.setContentType(zzCurrentPos, contentTypeHeaderValue.trim());
			contentType = contentTypeHeaderValue.trim();
			if (contentType.toLowerCase().contains("multipart/form-data;")) {
				isMultiplePart = true;
				try {
					multiplePartBoundary = contentTypeHeaderValue.split("multipart/form-data;\\s*boundary=")[1];
					multiplePartBoundary = multiplePartBoundary.trim();
				} catch (ArrayIndexOutOfBoundsException e) {
					T("ERROR: Could not find boundary in multipart content-type field value");
					multiplePartBoundary = "-@-@-@-@-ERROR-@-@-@-@-";
				}
			}
		}
	}


	private void addHeaderValue() {
		String headerValue = yytext();
		Integer start = zzStartRead;
		Integer end = zzMarkedPos - 1;

		if (headerValue.startsWith(":")) {
			addToken(zzStartRead, zzStartRead, Token.VARIABLE);
			start += 1;
			headerValue = headerValue.substring(1);
		}
		while (headerValue.startsWith(" ")) {
			addToken(start, start, Token.WHITESPACE);
			start += 1;
			headerValue = headerValue.substring(1);
		}
		if (isRequestCookieHeader || isResponseCookieHeader) {		
			addCookieTokens(headerValue, start);
			return;
		}

		if (isContentTypeHeader) {
			setContentType(headerValue); // Does not add Tokens, so do not return
		}

		if (headerValue.endsWith("\n") || headerValue.endsWith("\r")) {
			addToken(start, zzMarkedPos-2, Token.VARIABLE);
			addToken(zzMarkedPos-1, zzMarkedPos-1, Token.WHITESPACE);
		} else {
			addToken(start, zzMarkedPos-1, Token.VARIABLE);
		}
	}


	private void setResponseMode() {
		contentType = "text/html";
		isResponse = true;
		responseOffset = zzCurrentPos;
	}


	private int getBodyStateForMode() {
		if (isResponse && zzCurrentPos > responseOffset) {
			return ANY_BODY;
		}
		return REQ_BODY;
	}

	private void fallbackToTokenMaker() {
		int chunkStart = zzStartRead;
		int chunkEnd   = zzMarkedPos;

		TokenMaker tokenMaker = tokenMakerFactory.getTokenMaker(contentTypeManager.getContentType(chunkStart));

		// // If TokenMaker is Plaintext, skip it and just return single token capturing the whole line
		if (tokenMaker instanceof PlainTextTokenMaker) {
			yypushback(yylength());
			yybegin(PLAIN_TEXT_BODY);
			return;
		}

		// T("fallbackToTokenMaker: %s (%s) == %d", contentTypeManager.getContentType(zzCurrentPos), tokenMaker.getClass().getCanonicalName(), getBodyStateForMode());
		firstToken = (TokenImpl)tokenMaker.getTokenList(s, chunkStart, chunkEnd - 1);
		currentToken = (TokenImpl)firstToken.getLastPaintableToken();
		currentToken.setNextToken(null);
		zzMarkedPos = currentToken.getEndOffset();

		return;
		// T("fallbackToTokenMaker: %s (%d)", currentToken, zzMarkedPos);
	}


	private static final void T(String text, Object... arguments) {
  		if (DEBUG) {
    		System.out.printf("DEBUG:" + text + "\n", arguments);
		}
	}



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public HTTPTokenMaker(java.io.Reader in) {
  	tokenMakerFactory = TokenMakerFactory.getDefaultInstance(); 
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(java.io.Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count;
		zzCurrentPos = zzMarkedPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
		zzEOFDone = false;
		zzFinalHighSurrogate = zzCurrentPos;
	}

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            switch (zzLexicalState) {
            case YYINITIAL: {
              handleInvalidToken(); addHeaderEndToken();return firstToken;
            }  // fall though
            case 300: break;
            case REQ_LINE: {
              handleInvalidToken(); addHeaderEndToken();return firstToken;
            }  // fall though
            case 301: break;
            case REQ_HEADER: {
              handleInvalidToken(); addHeaderEndToken();return firstToken;
            }  // fall though
            case 302: break;
            case REQ_BODY: {
              handleInvalidToken(); addBodyEndToken();return firstToken;
            }  // fall though
            case 303: break;
            case QUERY_PARAM_NAME: {
              handleInvalidToken(); addHeaderEndToken();return firstToken;
            }  // fall though
            case 304: break;
            case QUERY_PARAM_VALUE: {
              handleInvalidToken(); addHeaderEndToken();return firstToken;
            }  // fall though
            case 305: break;
            case BODY_PARAM_NAME: {
              handleInvalidToken(); addBodyEndToken();return firstToken;
            }  // fall though
            case 306: break;
            case BODY_PARAM_VALUE: {
              handleInvalidToken(); addBodyEndToken();return firstToken;
            }  // fall though
            case 307: break;
            case BODY_MULTIPART_HEADER: {
              handleInvalidToken(); addBodyEndToken();return firstToken;
            }  // fall though
            case 308: break;
            case ANY_BODY: {
              handleInvalidToken(); addBodyEndToken();return firstToken;
            }  // fall though
            case 309: break;
            case PLAIN_TEXT_BODY: {
              handleInvalidToken(); addBodyEndToken();return firstToken;
            }  // fall though
            case 310: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { yypushback(yylength());
		yybegin(REQ_LINE);
            }
          // fall through
          case 35: break;
          case 2:
            { handleInvalidToken(); addHeaderEndToken();return firstToken;
            }
          // fall through
          case 36: break;
          case 3:
            { yypushback(yylength());yybegin(REQ_HEADER);
            }
          // fall through
          case 37: break;
          case 4:
            { addToken(Token.WHITESPACE);
            }
          // fall through
          case 38: break;
          case 5:
            { handleInvalidToken(); addToken(Token.IDENTIFIER);
            }
          // fall through
          case 39: break;
          case 6:
            { handleInvalidToken();addToken(Token.SEPARATOR);yybegin(QUERY_PARAM_NAME);
            }
          // fall through
          case 40: break;
          case 7:
            { yypushback(yylength()); yybegin(getBodyStateForMode());
            }
          // fall through
          case 41: break;
          case 8:
            { yypushback(yylength());
		if (contentTypeManager.getContentType(zzStartRead).toLowerCase().startsWith("multipart/")) {
			yybegin(BODY_MULTIPART_HEADER);
		} else if (!contentTypeManager.getContentType(zzStartRead).toLowerCase().contains("x-www-form-urlencoded")) {
			yybegin(ANY_BODY); 
		} else {
			yybegin(BODY_PARAM_NAME);
		}
            }
          // fall through
          case 42: break;
          case 9:
            { handleInvalidToken(); addBodyEndToken();return firstToken;
            }
          // fall through
          case 43: break;
          case 10:
            { startInvalidToken();
            }
          // fall through
          case 44: break;
          case 11:
            { handleInvalidToken();addToken(Token.WHITESPACE); yybegin(REQ_LINE);
            }
          // fall through
          case 45: break;
          case 12:
            { handleInvalidToken();addToken(Token.MARKUP_TAG_ATTRIBUTE);
            }
          // fall through
          case 46: break;
          case 13:
            { handleInvalidToken(); addToken(Token.SEPARATOR); yybegin(QUERY_PARAM_VALUE);
            }
          // fall through
          case 47: break;
          case 14:
            { handleInvalidToken();addToken(Token.SEPARATOR); yybegin(QUERY_PARAM_NAME);
            }
          // fall through
          case 48: break;
          case 15:
            { handleInvalidToken();addToken(Token.MARKUP_TAG_ATTRIBUTE_VALUE);
            }
          // fall through
          case 49: break;
          case 16:
            { handleInvalidToken();addToken(Token.COMMENT_DOCUMENTATION);
            }
          // fall through
          case 50: break;
          case 17:
            { handleInvalidToken();addToken(Token.MARKUP_TAG_NAME);
            }
          // fall through
          case 51: break;
          case 18:
            { handleInvalidToken(); addToken(Token.SEPARATOR); yybegin(BODY_PARAM_VALUE);
            }
          // fall through
          case 52: break;
          case 19:
            { handleInvalidToken();addToken(Token.SEPARATOR); yybegin(BODY_PARAM_NAME);
            }
          // fall through
          case 53: break;
          case 20:
            { yypushback(yylength());yybegin(ANY_BODY);
            }
          // fall through
          case 54: break;
          case 21:
            { fallbackToTokenMaker();
            }
          // fall through
          case 55: break;
          case 22:
            { int start = zzStartRead;
		int end   = zzMarkedPos;
        int len   = yylength();

        while (len > 1000) {
            addToken(start, start+999, Token.VARIABLE);
            start += 1000;
            len   -= 1000;
        }
        addToken(start, start+len-1, Token.VARIABLE);
            }
          // fall through
          case 56: break;
          case 23:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { handleInvalidToken(); addHeaderName();
            }
          // fall through
          case 57: break;
          case 24:
            { handleInvalidToken(); addHeaderValue();
            }
          // fall through
          case 58: break;
          case 25:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzStartRead, zzEndRead - zzStartRead, zzMarkedPos, -1);
            { addToken(Token.MARKUP_TAG_NAME);
            }
          // fall through
          case 59: break;
          case 26:
            { addHeaderValue();
            }
          // fall through
          case 60: break;
          case 27:
            { if (isMultiplePartBoundary()) {
			contentTypeManager.setContentType(zzCurrentPos, "text/plain");
			addToken(Token.COMMENT_DOCUMENTATION);
			addNullToken();
			return firstToken;
		} else {
			yypushback(yylength());
			yybegin(REQ_LINE);
		}
            }
          // fall through
          case 61: break;
          case 28:
            { if (isMultiplePartBoundary()) {
			contentTypeManager.setContentType(zzCurrentPos, "text/plain");
			addToken(Token.COMMENT_DOCUMENTATION);
			addNullToken();
			return firstToken;
		} else {
				// yypushback(yylength());
			fallbackToTokenMaker();
		}
            }
          // fall through
          case 62: break;
          case 29:
            { handleInvalidToken(); contentTypeManager = new ContentTypeManager(); addToken(zzStartRead, zzMarkedPos-2, Token.RESERVED_WORD); addToken(zzMarkedPos-1, zzMarkedPos-1, Token.WHITESPACE);
            }
          // fall through
          case 63: break;
          case 30:
            { addToken(Token.COMMENT_KEYWORD);
            }
          // fall through
          case 64: break;
          case 31:
            { handleInvalidToken(); addToken(Token.RESERVED_WORD_2);
            }
          // fall through
          case 65: break;
          case 32:
            { handleInvalidToken(); setResponseMode();addToken(Token.RESERVED_WORD_2);
            }
          // fall through
          case 66: break;
          case 33:
            { addToken(Token.PREPROCESSOR);
            }
          // fall through
          case 67: break;
          case 34:
            { addToken(Token.PREPROCESSOR);addEndToken(HTTPTokenMaker.INTERNAL_REQUEST_AND_RESPONSE); return firstToken;
            }
          // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
