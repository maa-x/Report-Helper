package com.pentest.reporthelper.ui.component;

import java.awt.Component;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.io.IOException;

import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;       


import org.fife.ui.rsyntaxtextarea.RSyntaxDocument;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextArea;
import org.fife.ui.rsyntaxtextarea.RSyntaxTextAreaEditorKit;
import org.fife.ui.rsyntaxtextarea.Theme;

import com.pentest.reporthelper.tokenmakers.HTTPTokenMaker;
import com.pentest.reporthelper.ui.action.CensorAction;
import com.pentest.reporthelper.ui.action.SnipAction;

import burp.api.montoya.logging.Logging;

public class ReportHelperTextArea extends RSyntaxTextArea {

    HTTPTokenMaker tokenMaker = new HTTPTokenMaker();
    Logging logging;

    public ReportHelperTextArea(Logging logging, String themeName) {
        this.logging = logging;
        setLineWrap(true);
        setEditable(true); // TODO: make this false?
        setCodeFoldingEnabled(true);
        setupKeyboardShortcuts();
        ((RSyntaxDocument) getDocument()).setSyntaxStyle(tokenMaker);
        setTheme(themeName);
    }

    public void setTheme(String themeName) {
        Theme theme;
        if (!themeName.startsWith("/")) {
            themeName = "/" + themeName;
        }
        try {
            theme = Theme.load(getClass().getResourceAsStream(themeName));
            theme.apply(this);
        } catch (IOException e) {
            logging.logToError(e.toString());
        }
    }

    @Override
    protected JPopupMenu createPopupMenu() {
        JPopupMenu popup = super.createPopupMenu();

        // Remove default Cut and Fold actions
        for (int i = 0; i < popup.getComponentCount(); i++) {
            Component component = popup.getComponent(i);
            if (component instanceof JMenuItem) {
                JMenuItem menuItem = (JMenuItem) component;
                if ("Cut".equals(menuItem.getText())
                    || "Folding".equals(menuItem.getText())
                    || "Delete".equals(menuItem.getText())
                    || "Paste".equals(menuItem.getText())
                    ) {
                    popup.remove(menuItem);
                }
            }
        }

        appendCensorSnipPopup(popup);
        return popup;
    }

    @Override
    public void setText(String t) {
        tokenMaker.resetContentTypeManager();
        super.setText(t);
    }

    protected void appendCensorSnipPopup(JPopupMenu popup) {
        popup.add(createPopupMenuItem(new CensorAction()));
        popup.add(createPopupMenuItem(new SnipAction()));
    }

    private void setupKeyboardShortcuts() {
        InputMap inputMap = getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
        ActionMap actionMap = getActionMap();

        KeyStroke selectAllKey = KeyStroke.getKeyStroke(KeyEvent.VK_A, InputEvent.CTRL_DOWN_MASK);
        KeyStroke copyKey = KeyStroke.getKeyStroke(KeyEvent.VK_C, InputEvent.CTRL_DOWN_MASK);
        KeyStroke pasteKey = KeyStroke.getKeyStroke(KeyEvent.VK_V, InputEvent.CTRL_DOWN_MASK);
        KeyStroke censorKey = KeyStroke.getKeyStroke(KeyEvent.VK_C,
                InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK);
        KeyStroke snipKey = KeyStroke.getKeyStroke(KeyEvent.VK_S,
                InputEvent.CTRL_DOWN_MASK | InputEvent.SHIFT_DOWN_MASK);
        KeyStroke undoKey = KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_DOWN_MASK);
        KeyStroke redoKey = KeyStroke.getKeyStroke(KeyEvent.VK_X, InputEvent.CTRL_DOWN_MASK);

        inputMap.put(selectAllKey, "selectAll");
        inputMap.put(copyKey, "copy");
        inputMap.put(pasteKey, "paste");
        inputMap.put(censorKey, "censor");
        inputMap.put(snipKey, "snip");
        inputMap.put(redoKey, "redo");
        inputMap.put(undoKey, "undo");

        actionMap.put("selectAll", new RSyntaxTextAreaEditorKit.SelectAllAction());
        actionMap.put("copy", new RSyntaxTextAreaEditorKit.CopyCutAsStyledTextAction(false));
        actionMap.put("undo", new RSyntaxTextAreaEditorKit.UndoAction());
        actionMap.put("redo", new RSyntaxTextAreaEditorKit.RedoAction());
        actionMap.put("censor", new CensorAction());
        actionMap.put("snip", new SnipAction());
    }

    public void censorSelection() {
        new CensorAction().actionPerformed(null);
    }

    public void snipSelection() {
        new SnipAction().actionPerformed(null);
    }
}