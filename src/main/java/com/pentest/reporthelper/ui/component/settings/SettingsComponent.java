package com.pentest.reporthelper.ui.component.settings;

import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.File;
import java.net.URL;
import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;

import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.AbstractListModel;
import javax.swing.ComboBoxModel;

import burp.api.montoya.persistence.Preferences;

public class SettingsComponent {

    public interface SettingsListener {
        void onSettingsSaved(String selectedTheme, Boolean separateLines);
    }

    private SettingsListener listener;

    public static final String THEME_KEY_STRING = "com.pentest.reporthelper.ui.theme";
    public static final String SEPARATE_LINES_KEY_STRING = "com.pentest.reporthelper.ui.separateLines";

    private List<String> themes = new ArrayList<>();
    private Preferences preferences = null;
    private JComboBox<String> themeComboBox;


    public SettingsComponent(SettingsListener listener, Preferences preferences) {
        this.listener = listener;
        this.preferences = preferences;
        createWindow();
    }

    public SettingsComponent(SettingsListener listener) {
        this(listener, null);
    }

    private void createWindow() {
        loadThemes();
        JFrame frame = new JFrame("Burp Reporting Plugin - Settings");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setSize(300, 200);
        frame.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5);
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.gridx = 0;
        gbc.gridy = 0;
    
        this.themeComboBox = new JComboBox<>(new ThemeComboBoxModel(themes));
        frame.add(new JLabel("Theme:"), gbc);
        gbc.gridx = 1;
        frame.add(themeComboBox, gbc);
    
        String currentTheme = preferences != null ? preferences.getString(THEME_KEY_STRING) : null;
        if (currentTheme != null) {
            String basename = new File(currentTheme).getName();
            int dotIndex = basename.lastIndexOf('.');
            if (dotIndex > 0) {
                basename = basename.substring(0, dotIndex);
            }
            themeComboBox.setSelectedItem(basename);
        }
    
        gbc.gridx = 0;
        gbc.gridy = 1;
        JComboBox<String> messageDelimeter = new JComboBox<>(new String[]{"Single Line", "Separate Lines"});
        frame.add(new JLabel("Message Delimeter:"), gbc);
        gbc.gridx = 1;
        frame.add(messageDelimeter, gbc);
    
        JButton saveButton = new JButton("Save");
        saveButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedTheme = getSelectedThemeFullPath();
                saveTheme(selectedTheme);
                if (listener != null) {
                    listener.onSettingsSaved(selectedTheme, messageDelimeter.getSelectedIndex() == 1);
                }
                frame.dispose();
            }
        });
    
        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        gbc.anchor = GridBagConstraints.CENTER;
        frame.add(saveButton, gbc);
    
        frame.setVisible(true);
    }

    private void loadThemes() {
        Set<String> allThemes = new HashSet<>();
        String path = "com/pentest/reporthelper/ui/themes/";

        allThemes.addAll(loadThemesFromPath(path));

        String[] predefinedThemes = {
                "org/fife/ui/rsyntaxtextarea/themes/dark.xml",
                "org/fife/ui/rsyntaxtextarea/themes/default-alt.xml",
                "org/fife/ui/rsyntaxtextarea/themes/default.xml",
                "org/fife/ui/rsyntaxtextarea/themes/druid.xml",
                "org/fife/ui/rsyntaxtextarea/themes/eclipse.xml",
                "org/fife/ui/rsyntaxtextarea/themes/idea.xml",
                "org/fife/ui/rsyntaxtextarea/themes/monokai.xml",
                "org/fife/ui/rsyntaxtextarea/themes/vs.xml"
        };
        for (String theme : predefinedThemes) {
            allThemes.add(theme);
        }

        themes = new ArrayList<>(allThemes);
    }

    private List<String> loadThemesFromPath(String path) {
        List<String> themeList = new ArrayList<>();
        try {
            ClassLoader classLoader = getClass().getClassLoader();
            URL resourceUrl = classLoader.getResource(path);
            if (resourceUrl == null) {
                System.err.println("Resource path not found: " + path);
                return themeList;
            }

            String decodedPath = URLDecoder.decode(resourceUrl.getPath(), StandardCharsets.UTF_8.name());
            File directory = new File(decodedPath);
            if (directory.isDirectory()) {
                File[] files = directory.listFiles((dir, name) -> name.endsWith(".xml"));
                if (files != null) {
                    for (File file : files) {
                        themeList.add(path + file.getName());
                    }
                }
            } else {
                String jarPath = decodedPath.substring(5, decodedPath.indexOf("!"));
                try (JarFile jarFile = new JarFile(jarPath)) {
                    Enumeration<JarEntry> entries = jarFile.entries();
                    while (entries.hasMoreElements()) {
                        JarEntry entry = entries.nextElement();
                        String entryName = entry.getName();
                        if (entryName.startsWith(path) && entryName.endsWith(".xml")) {
                            themeList.add(entryName);
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return themeList;
    }

    private void saveTheme(String theme) {
        if (preferences != null) {
            preferences.setString(THEME_KEY_STRING, theme);
        }
    }

    private class ThemeComboBoxModel extends AbstractListModel<String> implements ComboBoxModel<String> {
        private List<String> themes;
        private String selectedTheme;

        public ThemeComboBoxModel(List<String> themes) {
            this.themes = themes;
        }

        @Override
        public int getSize() {
            return themes.size();
        }

        @Override
        public String getElementAt(int index) {
            String fullPath = themes.get(index);
            String basename = new File(fullPath).getName();
            int dotIndex = basename.lastIndexOf('.');
            if (dotIndex > 0) {
                basename = basename.substring(0, dotIndex);
            }
            return basename;
        }

        @Override
        public void setSelectedItem(Object anItem) {
            selectedTheme = (String) anItem;
        }

        @Override
        public Object getSelectedItem() {
            return selectedTheme;
        }
    }

        public String getSelectedThemeFullPath() {
            int selectedIndex = themeComboBox.getSelectedIndex();
            if (selectedIndex >= 0 && selectedIndex < themes.size()) {
                return themes.get(selectedIndex);
            }
            return null;
        }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new SettingsComponent(null, null);
            }
        });
    }
}
