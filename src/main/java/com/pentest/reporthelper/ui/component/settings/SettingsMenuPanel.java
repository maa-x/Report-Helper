package com.pentest.reporthelper.ui.component.settings;

import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import org.fife.ui.rsyntaxtextarea.Theme;

import com.pentest.reporthelper.ui.component.ReportHelperComponent;

public class SettingsMenuPanel extends JPanel {
    private JPopupMenu settingsMenu;

    JCheckBoxMenuItem censorRequestItem;
    JCheckBoxMenuItem censorResponseItem;
    JCheckBoxMenuItem includeHeadersRequestItem;
    JCheckBoxMenuItem includeHeadersResponseItem;
    JCheckBoxMenuItem filterResponseHeadersItem;
    JCheckBoxMenuItem filterRequestHeadersItem;
    ReportHelperComponent parent;

    public SettingsMenuPanel(ReportHelperComponent parent) {
        this.parent = parent;
        settingsMenu = new JPopupMenu();
        
        JMenuItem configureHeadersItem = new JMenuItem("Configure Headers to Filter");
        configureHeadersItem.addActionListener(e -> parent.showAdvancedHeaderSettings());
        settingsMenu.add(configureHeadersItem);

        settingsMenu.addSeparator();
        JMenuItem extensionSettings = new JMenuItem("Extension Settings");
        extensionSettings.addActionListener(e -> {
            new SettingsComponent((selectedTheme, separateLines) -> {
                parent.setSeparateLinesDelimeter(separateLines);
                parent.getPreferences().setBoolean(SettingsComponent.SEPARATE_LINES_KEY_STRING, separateLines);
                try {
                    Theme theme = Theme.load(getClass().getResourceAsStream("/" + selectedTheme));
                    theme.apply(parent.getTextArea());
                } catch (Exception ex) {
                    parent.getLogging().logToError(ex.toString());
                }
            }, parent.getPreferences());
        });
        settingsMenu.add(extensionSettings);
    }

    public void show(JButton settingsButton) {
        settingsMenu.show(settingsButton, 0, settingsButton.getHeight());
    }
}