package com.pentest.reporthelper.ui.component;

import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Image;
import java.awt.Color;
import javax.swing.BorderFactory;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JToggleButton;
import javax.swing.JPanel;
import javax.swing.border.TitledBorder;

import com.pentest.reporthelper.ui.component.ReportHelperComponent.HTTPMessageType;
import com.pentest.reporthelper.ui.component.settings.SettingsMenuPanel;

public class EditorToolbar extends JPanel {
    private JButton settingsButton;
    private SettingsMenuPanel settingsMenuPanel;
    private ReportHelperComponent parent;
    private JToggleButton includeResponseBtn;
    private JToggleButton includeRequestBtn;
    private JToggleButton includeRequestHeadersBtn;
    private JToggleButton includeResponseHeadersBtn;
    private JToggleButton filterRequestHeadersBtn;
    private JToggleButton filterResponseHeadersBtn;
    private JToggleButton censorRequestBtn;
    private JToggleButton censorResponseBtn;

    public EditorToolbar(ReportHelperComponent parent) {
        this.parent = parent;
    }

    public void configureToolbar() {
        setLayout(new BoxLayout(this, BoxLayout.X_AXIS));

        JPanel leftPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
        leftPanel.setAlignmentY(TOP_ALIGNMENT);

        JPanel requestPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
        TitledBorder requestBorder = BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Request",
                TitledBorder.LEADING, TitledBorder.TOP,
                new Font("SansSerif", Font.PLAIN, 10), Color.DARK_GRAY);
        requestPanel.setBorder(requestBorder);

        if (parent.getMessageType() == HTTPMessageType.RESPONSE) {
            includeRequestBtn = createScaledToggleButton("/icons/includeRequest.png", "Include Request",
                    e -> {
                        parent.setIncludeRequest(!parent.shouldIncludeRequest());
                        includeRequestBtn.setSelected(parent.shouldIncludeRequest());
                        censorRequestBtn.setEnabled(parent.shouldIncludeRequest());
                        filterRequestHeadersBtn.setEnabled(parent.shouldIncludeRequest());
                        includeRequestHeadersBtn.setEnabled(parent.shouldIncludeRequest());
                    });
            includeRequestBtn.setSelected(parent.shouldIncludeRequest());
            requestPanel.add(includeRequestBtn);
        }
        censorRequestBtn = createScaledToggleButton("/icons/censorRequest.png", "Toggle Censor Request",
                e -> parent.setCensorRequest(!parent.shouldCensorRequest()));
        censorRequestBtn.setSelected(parent.shouldCensorRequest());
        requestPanel.add(censorRequestBtn);

        includeRequestHeadersBtn = createScaledToggleButton("/icons/requestHeaders.png", "Include Request Headers",
                e -> parent.setIncludeRequestHeaders(!parent.shouldIncludeRequestHeaders()));
        includeRequestHeadersBtn.setSelected(parent.shouldIncludeRequestHeaders());
        requestPanel.add(includeRequestHeadersBtn);

        filterRequestHeadersBtn = createScaledToggleButton("/icons/filterRequestHeaders.png", "Filter Request Headers",
                e -> parent.setShouldFilterRequestHeaders(!parent.getShouldFilterRequestHeaders()));
        filterRequestHeadersBtn.setSelected(parent.getShouldFilterRequestHeaders());
        requestPanel.add(filterRequestHeadersBtn);

        censorRequestBtn.setEnabled(parent.shouldIncludeRequest());
        filterRequestHeadersBtn.setEnabled(parent.shouldIncludeRequest());
        includeRequestHeadersBtn.setEnabled(parent.shouldIncludeRequest());

        leftPanel.add(requestPanel);

        leftPanel.add(Box.createRigidArea(new java.awt.Dimension(2, 30)));

        JPanel responsePanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
        TitledBorder responseBorder = BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Response",
                TitledBorder.LEADING, TitledBorder.TOP,
                new Font("SansSerif", Font.PLAIN, 10), Color.DARK_GRAY);
        responsePanel.setBorder(responseBorder);

        if (parent.getMessageType() == HTTPMessageType.REQUEST) {
            includeResponseBtn = createScaledToggleButton("/icons/includeResponse.png", "Include Response",
                    e -> {
                        parent.setIncludeResponse(!parent.shouldIncludeResponse());
                        includeResponseBtn.setSelected(parent.shouldIncludeResponse());
                        censorResponseBtn.setEnabled(parent.shouldIncludeResponse());
                        filterResponseHeadersBtn.setEnabled(parent.shouldIncludeResponse());
                        includeResponseHeadersBtn.setEnabled(parent.shouldIncludeResponse());
                    });
            includeResponseBtn.setSelected(parent.shouldIncludeResponse());
            responsePanel.add(includeResponseBtn);
        }

        censorResponseBtn = createScaledToggleButton("/icons/censorResponse.png", "Toggle Censor Response",
                e -> parent.setCensorResponse(!parent.shouldCensorResponse()));
        censorResponseBtn.setSelected(parent.shouldCensorResponse());
        responsePanel.add(censorResponseBtn);

        includeResponseHeadersBtn = createScaledToggleButton("/icons/responseHeaders.png", "Include Response Headers",
                e -> parent.setIncludeResponseHeaders(!parent.shouldIncludeResponseHeaders()));
        includeResponseHeadersBtn.setSelected(parent.shouldIncludeResponseHeaders());
        responsePanel.add(includeResponseHeadersBtn);

        filterResponseHeadersBtn = createScaledToggleButton("/icons/filterResponseHeaders.png", "Filter Response Headers",
                e -> parent.setShouldFilterResponseHeaders(!parent.getShouldFilterResponseHeaders()));
        filterResponseHeadersBtn.setSelected(parent.getShouldFilterResponseHeaders());

        censorResponseBtn.setEnabled(parent.shouldIncludeResponse());
        filterResponseHeadersBtn.setEnabled(parent.shouldIncludeResponse());
        includeResponseHeadersBtn.setEnabled(parent.shouldIncludeResponse());

        responsePanel.add(filterResponseHeadersBtn);
        leftPanel.add(responsePanel);

        JPanel editorPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 5, 0));
        TitledBorder editorBorder = BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "Editor",
                TitledBorder.LEADING, TitledBorder.TOP,
                new Font("SansSerif", Font.PLAIN, 10), Color.DARK_GRAY);
        editorPanel.setBorder(editorBorder);
        JButton copyButton = createScaledButton("/icons/copyButton.png", "Copy with Formatting", e -> parent.copyToClipboard());
        editorPanel.add(copyButton);
        JButton redactButton = createScaledButton("/icons/redactButton.png", "Redact Selection", e -> parent.getTextArea().censorSelection());
        editorPanel.add(redactButton);
        JButton snipButton = createScaledButton("/icons/snipButton.png", "Snip Selection", e -> parent.getTextArea().snipSelection());
        editorPanel.add(snipButton);

        leftPanel.add(editorPanel);

        JPanel rightPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 0, 0));
        rightPanel.setAlignmentY(TOP_ALIGNMENT);
        TitledBorder settingsBorder = BorderFactory.createTitledBorder(
                BorderFactory.createEtchedBorder(), "☰",
                TitledBorder.LEADING, TitledBorder.TOP,
                new Font("SansSerif", Font.PLAIN, 10), Color.DARK_GRAY);
        rightPanel.setBorder(settingsBorder);

        settingsButton = new JButton("⚙");
        settingsMenuPanel = new SettingsMenuPanel(parent);
        settingsButton.addActionListener(e -> settingsMenuPanel.show(settingsButton));
        rightPanel.add(settingsButton);
        rightPanel.setMaximumSize(rightPanel.getPreferredSize());

        add(leftPanel);
        add(Box.createHorizontalGlue());
        add(rightPanel);
    }

    private JToggleButton createScaledToggleButton(String iconPath, String tooltip, java.awt.event.ActionListener action) {
        ImageIcon originalIcon = new ImageIcon(getClass().getResource(iconPath));
        Image scaledImage = originalIcon.getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH);
        JToggleButton button = new JToggleButton(new ImageIcon(scaledImage));
        button.setToolTipText(tooltip);
        button.addActionListener(action);
        return button;
    }

    private JButton createScaledButton(String iconPath, String tooltip, java.awt.event.ActionListener action) {
        ImageIcon originalIcon = new ImageIcon(getClass().getResource(iconPath));
        Image scaledImage = originalIcon.getImage().getScaledInstance(16, 16, Image.SCALE_SMOOTH);
        JButton button = new JButton(new ImageIcon(scaledImage));
        button.setToolTipText(tooltip);
        button.addActionListener(action);
        return button;
    }

}